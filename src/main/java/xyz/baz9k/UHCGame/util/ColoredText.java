package xyz.baz9k.UHCGame.util;

import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.chat.BaseComponent;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention;

import java.awt.*;

public class ColoredText {

    private final ComponentBuilder cb = new ComponentBuilder();
    private final FormatRetention retention;

    /**
     * Create builder with retention {@link FormatRetention#NONE}
     * @see FormatRetention
     */
    public ColoredText() {
        this(FormatRetention.NONE);
    }
    
    /**
     * Create builder with some retention
     * @see FormatRetention
     */
    public ColoredText(FormatRetention retention) {
        this.retention = retention;
    }
    public static ColoredText of(String s, ChatColor c) {
        return new ColoredText().append(s, c);
    }
    public static ColoredText of(BaseComponent[] bc) {
        return new ColoredText().append(bc);
    }

    /**
     * Coerce an object to string and append to builder.
     * @param o
     * @return
     */
    public ColoredText append(Object o) {
        return append(String.valueOf(o));
    }

    /**
     * Append a piece of text directly to builder.
     * @param s
     * @return
     * @see #appendColored(String)
     */
    public ColoredText append(String s) {
        cb.append(s, retention);
        return this;
    }

    /**
     * Append BaseComponents to builder.
     * @param bc
     * @return
     */
    public ColoredText append(BaseComponent... bc) {
        cb.append(bc, retention);
        return this;
    }

    /**
     * Append a string with {@link Color} c to builder.
     * @param s
     * @param c
     * @return
     */
    public ColoredText append(String s, Color c) {
        ChatColor cc = ChatColor.of(c);
        append(s, cc);
        return this;
    }

    /**
     * Append a string with {@link ChatColor} c to builder.
     * @param s
     * @param clr
     * @return
     */
    public ColoredText append(String s, ChatColor c) {
        if (c.getColor() == null) throw new IllegalArgumentException("Argument clr is not a color.");

        cb.append(s, retention)
          .color(c);
        return this;
    }

    /**
     * Append a colored string (the kind generated by ChatColor + String concatenation) to builder.
     * @param s
     * @return
     */
    public ColoredText appendColored(String s) {
        cb.appendLegacy(s);
        return this;
    }

    /**
     * Set most recently appended item's color
     * @param clr
     * @return
     */
    public ColoredText color(ChatColor clr) {
        if (clr.getColor() == null) throw new IllegalArgumentException("Argument clr is not a color.");
        cb.color(clr);
        return this;
    }

    /**
     * Set most recently appended item's bold status
     * @param bold
     * @return
     */
    public ColoredText bold(boolean bold) {
        cb.bold(bold);
        return this;
    }

    /**
     * Set most recently appended item's italic status
     * @param italic
     * @return
     */
    public ColoredText italic(boolean italic) {
        cb.italic(italic);
        return this;
    }

    /**
     * Set most recently appended item's underlined status
     * @param underlined
     * @return
     */
    public ColoredText underlined(boolean underlined) {
        cb.underlined(underlined);
        return this;
    }

    /**
     * Set most recently appended item's strikethrough status
     * @param strikethrough
     * @return
     */
    public ColoredText strikethrough(boolean strikethrough) {
        cb.strikethrough(strikethrough);
        return this;
    }

    /**
     * Set most recently appended item's obfuscated status
     * @param obfuscated
     * @return
     */
    public ColoredText obfuscated(boolean obfuscated) {
        cb.obfuscated(obfuscated);
        return this;
    }

    /**
     * Set most currently appended item's {@link ClickEvent}
     * @param event
     * @return
     */
    public ColoredText event(ClickEvent event) {
        cb.event(event);
        return this;
    }
    
    /**
     * Set most currently appended item's {@link HoverEvent}
     * @param event
     * @return
     */
    public ColoredText event(HoverEvent event) {
        cb.event(event);
        return this;
    }

    /**
     * Convert builder into an array of {@link BaseComponent}s.
     */
    public BaseComponent[] toComponents() {
        return cb.create();
    }

    /**
     * Convert builder to string.
     */
    public String toString() {
        return BaseComponent.toLegacyText(toComponents());
    }

}
