package xyz.baz9k.UHCGame.util;

import net.md_5.bungee.api.ChatColor;
import net.md_5.bungee.api.chat.BaseComponent;
import net.md_5.bungee.api.chat.ClickEvent;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention;

import java.awt.*;
import static xyz.baz9k.UHCGame.util.Formats.*;
import static java.util.Collections.unmodifiableMap;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;

public class ColoredText {
    private final ComponentBuilder cb = new ComponentBuilder();
    private final FormatRetention retention;

    @FunctionalInterface
    private static interface Formatting extends BiConsumer<ComponentBuilder, Boolean> {
        Formatting doNothing = (_0, _1) -> {};

        /**
         * Apply ChatColor formatting onto component builder
         * @param cb
         */
        default void format(ComponentBuilder cb) {
            accept(cb, true);
        }
    }

    private static Map<ChatColor, Formatting> fmtActions = new HashMap<>();
    static {
        fmtActions.put(BOLD,          ComponentBuilder::bold);
        fmtActions.put(ITALIC,        ComponentBuilder::italic);
        fmtActions.put(UNDERLINED,    ComponentBuilder::underlined);
        fmtActions.put(STRIKETHROUGH, ComponentBuilder::strikethrough);
        fmtActions.put(OBFUSCATED,    ComponentBuilder::obfuscated);
        fmtActions = unmodifiableMap(fmtActions);
    }
    /**
     * Create builder with retention {@link FormatRetention#NONE}
     * @see FormatRetention
     */
    public ColoredText() {
        this(FormatRetention.NONE);
    }
    
    /**
     * Create builder with some retention
     * @see FormatRetention
     */
    public ColoredText(FormatRetention retention) {
        this.retention = retention;
    }
    public static ColoredText of(String s, ChatColor c, ChatColor... fmt) {
        return new ColoredText().append(s, c, fmt);
    }
    public static ColoredText of(BaseComponent[] bc) {
        return new ColoredText().append(bc);
    }

    /**
     * Coerce an object to string and append to builder.
     * @param o
     * @return this instance
     */
    public ColoredText append(Object o) {
        return append(String.valueOf(o));
    }

    /**
     * Append a piece of text directly to builder.
     * @param s
     * @return this instance
     * @see #appendColored(String)
     */
    public ColoredText append(String s) {
        cb.append(s, retention);
        return this;
    }

    /**
     * Append BaseComponents to builder.
     * @param bc
     * @return this instance
     */
    public ColoredText append(BaseComponent... bc) {
        cb.append(bc, retention);
        return this;
    }

    /**
     * Append a string with {@link Color} c to builder.
     * @param s
     * @param c
     * @return this instance
     */
    public ColoredText append(String s, Color c) {
        ChatColor cc = ChatColor.of(c);
        append(s, cc);
        return this;
    }

    /**
     * Append a string with a color and some formatting to builder.
     * @param s
     * @param clr ChatColor color
     * @param fmt Array of ChatColor formatting types (BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, MAGIC)
     * @return this instance
     */
    public ColoredText append(String s, ChatColor c, ChatColor... fmt) {
        if (c.getColor() == null) throw new IllegalArgumentException("Argument clr is not a color.");

        for (ChatColor f : fmt) {
            fmtActions.getOrDefault(f, Formatting.doNothing).format(cb);
        }
        cb.append(s, retention)
          .color(c);
        return this;
    }

    /**
     * Append a colored string (the kind generated by ChatColor + String concatenation) to builder.
     * @param s
     * @return this instance
     */
    public ColoredText appendColored(String s) {
        cb.appendLegacy(s);
        return this;
    }

    /**
     * Set most currently appended item's {@link ClickEvent}
     * @param event
     * @return this instance
     */
    public ColoredText event(ClickEvent event) {
        cb.event(event);
        return this;
    }
    
    /**
     * Set most currently appended item's {@link HoverEvent}
     * @param event
     * @return this instance
     */
    public ColoredText event(HoverEvent event) {
        cb.event(event);
        return this;
    }

    /**
     * Convert builder into an array of {@link BaseComponent}s.
     */
    public BaseComponent[] toComponents() {
        return cb.create();
    }

    /**
     * Convert builder to string.
     */
    public String toString() {
        return BaseComponent.toLegacyText(toComponents());
    }

}
